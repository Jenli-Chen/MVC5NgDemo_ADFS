
Code Camp Demonstration app
Hybrid MVC / AngularJS mini-SPA app

A) - set up initial structure of application

1) Create MVCDemo web app - MVC + WebAPI with No Authentication
2) Rename solution to MVC5NgDemo, rename project file
3) Package Updates
	bootstrap to 3.2
	Mvc to 5.2.2 (also gets Razor to 3.2.2, WebPages to 3.2.2)
	Newtonsoft.Json 6.0.6
	jQuery to 2.1.1
	WebApi.WebHost to 5.2.2 (also gets WebApi.Client WebApi.Core)
	WebApi to 5.2.2
	WebApi.HelpPage to 5.2.2
	(updates _ViewStart.cshtml)
4) Added Packages
	EntityFramework 6.1.1
	AngularJS.Route 1.3.0
	gets AngularJS.Core 1.3.0
5) Separated out views for _TopNav and _Footer
6) Added render section "headend" to _Layout
7) Moved meta for viewport down
8) Uninstalled Modernizr
9) Enabled HTTPS, updated default URL
10) Edited homepage to be more informative for demo
--Commit to GitHub

11) Added projects with model(s) and Entity Framework repository for persistent data
12) Created API folder for WebApi controllers, moved ValuesController there
13) Added references to Model and EFDAL assemblies
14) Added Rehearsals controller for WebApi
15) Added connection string to web.config
--Commit to GitHub

** In order for this to work, create database MVCDemo (or whatever you want to call it) using SSMS
** OR change the connection string to create a local database
** Run script Schema1_Initial.sql from BGoodMusic.EFDAL\BGM_SqlScripts
** OR let EF create the table automagically
** Then use Visual Studio or SSMS to manually add some entries to the Rehearsals table
** Change the name of the database in the connection string in web.config to match your database name

16) Switched to Attribute Routing, added /demo/ to URL paths
	(this allows separation of cookies between front-end and WebAPI)
	Add MapMvcAttributeRoutes in RouteConfig.cs
17) Added routing rules to Home controller
18) Added Root Hit Redirect rule in web.config
19) Added RehearsalListItem under new folder ViewModels
20) Added Music controller and code in Index method to show list of rehearsals from server side
21) Added menu entry in _TopNav
--Commit to GitHub

*******************************************
PART B - Adding Auth for MVC App using ADFS
*******************************************
1) Renamed solution and project files to help keep things straight between different solutions
2) Add Startup class to web project
3) Install packages
	Microsoft.Owin.Security.WsFederation (3.0.0)
		also gets
		Owin (1.0.0)
		Microsoft.Owin (3.0.0)
		Microsoft.Owin.Security (3.0.0)
		System.IdentityModel.Tokens.Jwt (4.0.0)
		Microsoft.IdentityModel.Protocol.Extensions (1.0.0)
	Microsoft.Owin.Security.Cookies (3.0.0)
	Microsoft.Owin.Security.OAuth (3.0.0)
	Microsoft.Owin.Host.SystemWeb (3.0.0)
	(Added dependentAssembly "Microsoft.Owin" in web.config)
	(reordered references in .csproj for easier comparison)
	(updated port #'s in csproj to differentiate from MVC5NgDemo, from which this was copied
	 updated IISExpressSSLPort to match)

4) Add using statements to Startup
	Microsoft.Owin
	Owin
5) Added Auth controller, with Login, LoggedIn and Logout actions
6) Added View for LoggedIn
7) Added Test controller
8) In Startup - Add app.UseCookieAuthentication
9) In Startup - Add app.UseWsFederationAuthentication
10) In ADFS, Add Relying Party Trust
	Enter data about the relying party manually - Next
	Enter the Display Name, and any Notes that will be helpful - Next
	AD FS profile - Next
	No token encryption - Next
	WS-Federation - add endpoint (from app properties in VS, plus "demo" used with routing) - Next
		https://localhost:44306/demo/
	Relying party trust identifier - value put into web.config key e.g. "ast:realmADFSId" - Next
		(using urn makes this easier to differentiate, but could be URL or URI)
	I do not want to configure multi-factor ... at this time - Next
	Permit all users to access this relying party - Next
	Summary tabs - Next
	Leave "Open the Edit Claim Rules dialog" checked, click Close

11) In ADFS, add Claim Rules in "Edit Claim Rules" dialog
	Click "Add Rule..."
	Use default "Send LDAP Attributes as Claims" - Next
	Claim Rule Name - "Basic Claims"
	Attribute store: Active Directory
	LDAP Attribute: "SAM-Account-Name" -- Outgoing: "Name ID"
	Display-Name -- "Name"
	Click "Finish"
	Click OK

12) In Filter Config, add AuthorizeAttribute
13) In Home controller, add AllowAnonymous to Index method
14) Add _LoginPartial to Shared Views, add @Html.Partial for same to _TopNav
16) Test by starting app and clicking on "Rehearsals (MVC)"
17) Added ClientInfo action to Tests controller, related ViewModels and View
18) Added Link to ClientInfo on Tests index page

***********************************************
PART C - Get token from ADFS for use by Angular
Includes getting refresh token from ADFS,
	Encrypting and saving refresh token to database
	Getting refresh token decrypting and using it to
	get an auth token
	First Angular code will be added in Part D
***********************************************

1) Added packages:
	Microsoft.IdentityModel.Clients.ActiveDirectory (2.11.10918.1222)
	Microsoft.AspNet.WebApi.Owin (5.2.2)
	Microsoft.Owin.Security.Jwt (3.0.0)
	Microsoft.Owin.Security.ActiveDirectory (3.0.0)

1a) Updated Homepage message

2) Updated Startup - added SecurityTokenValidated method

3) In ADFS, Added a second Relying Party Trust for WebAPI token access
	Enter data about the relying party manually - Next
	Enter the Display Name, and any Notes that will be helpful - Next
	AD FS profile - Next
	No token encryption - Next
	Neither WS-Federation nor SAML
	Relying party trust identifier - value put into web.config key e.g. "ast:MVC5NgCCDemoWebAPI" - Next
		(using urn makes this easier to differentiate, but could be URL or URI)
	I do not want to configure multi-factor ... at this time - Next
	Permit all users to access this relying party - Next
	Summary tabs - Next
	Leave "Open the Edit Claim Rules dialog" checked, click Close

4) In ADFS, add Claim Rules in "Edit Claim Rules" dialog
	Click "Add Rule..."
	Use default "Send LDAP Attributes as Claims" - Next
	Claim Rule Name - "Basic Claims"
	Attribute store: Active Directory
	LDAP Attribute: "SAM-Account-Name" -- Outgoing: "Name ID"
	Display-Name -- "Name"
	Click "Finish"
	Click OK

5) ON ADFS Server - start PowerShell as admin
	(do web search for ADFS Powershell if the commands below aren't installed')
	Update the URL below as necessary CASE MUST MATCH EXACTLY the case used in the configuration in web.config
	ClientId value MUST be unique for ADFS server and must match excactly the value in the web.config
	Name must be unique for ADFS server

	Add-AdfsClient -ClientId TokenClientCC101 -RedirectUri https://localhost:44307/demo/auth/loggedin2 -Name "MVC5Demo CC WebAPI Token Callback"

	Run to get info: (use identifier configured using key "ast:webApiADFSId" in web.config)

	Get-AdfsRelyingPartyTrust -Identifier urn:MVC5NgCCDemoWebAPI 

	Set-AdfsRelyingPartyTrust -TargetIdentifier urn:MVC5NgCCDemoWebAPI -IssueOAuthRefreshTokensTo AllDevices

6) Run web app, set breakpoint on Auth.LoggedIn2 - make sure there's a "code" value

7) Added class UserInfo to BGoodMusic.Models
8) Updated IBGoodMusicRepository, BGoodMusicDBContext
9) Added migration (see _MigrationNotes.txt in BGoodMusic.EFDAL)
10) saved SQL script from migration as Schema_S2_AddUserInfo, updated script
11) Ran SQL script to add table to working demo database
12) Added ClaimsHelper, CommonDefs and MachineKeyHelper in Infrastructure
13) Added DemoControllerBase in Controllers
14) Modify Auth controller to inherit from DemoControllerBase
15) Added code to Auth.LoggedIn2 and supporting methods in Auth controller
16) Added ViewBag.Message display to LoggedIn2 view
18) Added call to CleanupForLogout to Auth.Logout

19) Test:
	Log in and get to https://localhost:44307/demo/auth/LoggedIn
	(as opposed to getting to https://localhost:44307/demo/auth/LoggedIn2 and seeing messages on the page)
	Check table bgm_UserInfo in database to see entry with encrypted refresh token
	Log out and see that entry in database is removed

20) Added Models\Test\AuthInfoResponse.cs and ClaimInfo.cs
21) Added Controllers\API\TestAuthInfoController
22) Added app.UseActiveDirectoryFederationServicesBearerAuthentication to Startup

23) Added CamelCasePropertyNamesContractResolver to WebApiConfig
24) Added SuppressDefaultHostAuthentication and HostAuthenticationFilter to WebApiConfig
24) Added AuthorizeAttribute to WebApiConfig filters
25) Try https://localhost:44307/api/TestAuthInfo from browser and confirm authorization denied
26) Added TokenInfo to ViewModels\Shared
27) Added AngularTest to ViewModels\Test
28) Added AngularTest action to Test controller
29) Added View for AngularTest
30) Added initial code to AngularTest action method to get token back from database

********************************************
PART D - AngularJS mini-SPA for Auth testing
********************************************

0) additional cleanup from having removed modernizr

** Initial structure for Angular test app (mini-SPA)

1) added folders app, app\test
2) added Angular (Ng) module appTest.js
3) added Ng factory appTest.config.js
4) added Ng module testconfig.route.js
5) added Ng controller testMain.js and view testMain.html
6) Test - ensure Angular page shows up on "Angular Test" MVC page